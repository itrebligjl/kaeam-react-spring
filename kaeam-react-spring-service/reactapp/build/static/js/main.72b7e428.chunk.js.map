{"version":3,"sources":["client/img/Archemy_TM.png","logo.svg","client/components/homeNav.js","ServerInfo.js","ProcessDefsInfo.js","ProcessInstancesInfo.js","TasksInfo.js","client/components/GlobalNav.js","client/components/TabsBuild.js","App.js","client/components/Login.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","home","File","Edit","View","Catalog","Solution","Build","Operate","Visualize","Metrics","Tools","Scripts","Help","build","Elicit","Search","Discover","Reuse","Adapt","Deploy","operate","visualize","key","ServerInfo","getServerData","fetch","headers","Accept","Content-Type","then","response","json","data","_this","setState","setInterval","this","haveData","state","result","undefined","react_default","a","createElement","class","className","name","id","version","location","capabilities","map","capability","Component","ProcessDefsInfo","getProcessDefsData","handleStartProcess","cid","pid","method","handleTaskList","console","log","_this2","processes","scope","processdef","type","onClick","ProcessInstancesInfo","getProcessInstancesData","instances","processinst","processName","TasksInfo","getTasksData","tasks","task","taskName","GlobalNav","Navbar_default","bg","Brand","href","src","logo","width","height","alt","App","React","BrowserRouter","src_ServerInfo","src_ProcessDefsInfo","src_ProcessInstancesInfo","src_TasksInfo","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+FCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxC,IAAMC,EAAO,CACX,CAAEC,KAAM,IACR,CAAEC,KAAM,IACR,CAAEC,KAAM,IACR,CAAEC,QAAS,IACX,CACEC,SAAU,CACR,CAAEC,MAAO,mBACT,CAAEC,QAAS,qBACX,CAAEC,UAAW,yBAGjB,CAAEC,QAAS,IACX,CAAEC,MAAO,IACT,CAAEC,QAAS,IACX,CAAEC,KAAM,KAGJC,EAAQ,CACZ,CAAEZ,KAAM,IACR,CAAEC,KAAM,IACR,CAAEC,KAAM,IACR,CACEG,MAAO,CACL,CAAEQ,OAAQ,0BACV,CAAEC,OAAQ,0BACV,CAAEC,SAAU,4BACZ,CAAEC,MAAO,yBACT,CAAEC,MAAO,yBACT,CAAEC,OAAQ,4BAGd,CAAEZ,QAAS,qBACX,CAAEC,UAAW,uBACb,CAAEI,KAAM,KAGJQ,EAAU,CACd,CAAEnB,KAAM,IACR,CAAEC,KAAM,IACR,CAAEC,KAAM,IACR,CAAEG,MAAO,mBACT,CAAEC,QAAS,qBACX,CAAEC,UAAW,uBACb,CAAEI,KAAM,KAGJS,EAAY,CAChB,CAAEpB,KAAM,IACR,CAAEC,KAAM,IACR,CAAEC,KAAM,IACR,CAAEG,MAAO,mBACT,CAAEC,QAAS,qBACX,CAAEC,UAAW,uBACb,CAAEI,KAAM,KAGVhB,EAAOC,QAAU,SAACyB,GAChB,OAAQA,GACN,IAAK,WACL,IAAK,qBACL,IAAK,kBAEL,IAAK,yBAEL,IAAK,yBAEL,IAAK,2BAEL,IAAK,iCAEL,IAAK,wBAEL,IAAK,wBAEL,IAAK,yBACH,OAAOT,EACT,IAAK,oBAEL,IAAK,uBACH,OAAOO,EACT,IAAK,sBAEL,IAAK,sBACH,OAAOC,EACT,QACE,OAAOrB,mJCNEuB,0NAvEXC,cAAgB,WACZC,MAAM,eACE,CACIC,QAAS,CACLC,OAAU,mBACVC,eAAgB,sBAGvBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFC,EAAKC,SAASF,yFAb1BG,YAAYC,KAAKZ,cAAe,sCAkBhC,IAAMa,EAAWD,KAAKE,OAASF,KAAKE,MAAMC,aAAgCC,IAAtBJ,KAAKE,MAAMC,QAAwBH,KAAKE,MAAMC,OAAO,mBACzG,OACQE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAeC,UAAU,oBAChCJ,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,+BAEZF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,4BACPH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,OACNH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAV,QACCP,EACOI,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAYR,KAAKE,MAAMC,OAAO,mBAAmBO,MAE3DL,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aAGlBH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAV,MACCP,EACOI,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAYR,KAAKE,MAAMC,OAAO,mBAAmBQ,IAE3DN,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aAGlBH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAV,WACCP,EACOI,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAYR,KAAKE,MAAMC,OAAO,mBAAmBS,SAE3DP,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aAGlBH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAV,YACCP,EACOI,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAYR,KAAKE,MAAMC,OAAO,mBAAmBU,UAE3DR,EAAAC,EAAAC,cAAA,MAAIC,MAAM,aAGlBH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YAAV,gBACCP,EACOI,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YACNH,EAAAC,EAAAC,cAAA,UACKP,KAAKE,MAAMC,OAAO,mBAAmBW,aAAaC,IAAI,SAAAC,GAAU,OACzDX,EAAAC,EAAAC,cAAA,UAAKS,OAMrBX,EAAAC,EAAAC,cAAA,MAAIC,MAAM,uBApErBS,cC6FVC,6MAvFXC,mBAAqB,WACjB9B,MAAM,4DACE,CACIC,QAAS,CACLC,OAAU,mBACVC,eAAgB,sBAGvBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFC,EAAKC,SAASF,QAI9BwB,mBAAqB,SAACC,EAAKC,GACvBjC,MAAM,2BAA6BgC,EAAM,cAAgBC,EAAM,aAAc,CACzEC,OAAQ,OACRjC,QAAS,CACLC,OAAU,mBACVC,eAAgB,yBAK5BgC,eAAiB,SAACH,EAAKC,GACnBG,QAAQC,IAAR,qBACArC,MAAM,2BAA6BgC,EAAM,cAAgBC,EAAM,SAC/D,CACIC,OAAQ,MACRjC,QAAS,CACLC,OAAU,mBACVC,eAAgB,0GAlCxBO,YAAYC,KAAKmB,mBAAoB,sCA2ChC,IAAAQ,EAAA3B,KACCC,EAAWD,KAAKE,OAASF,KAAKE,MAAM0B,UAC1C,OACQvB,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAeC,UAAU,oBAChCJ,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,uCAEZF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,4BACNP,EACOI,EAAAC,EAAAC,cAAA,SAAOC,MAAM,cACTH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,QACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,YAGJxB,EAAAC,EAAAC,cAAA,aACCP,KAAKE,MAAM0B,UAAUb,IAAI,SAAAe,GAAU,OAC5BzB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAQuB,EAAW,kBACvBzB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,SAASvB,MAAM,kBAAkBwB,QAAS,kBAAML,EAAKP,mBAAmBU,EAAW,gBAAgBA,EAAW,iBAA3H,UACJzB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQwB,KAAK,SAASvB,MAAM,kBAAkBwB,QAAS,kBAAML,EAAKH,eAAeM,EAAW,gBAAgBA,EAAW,iBAAvH,mBAOpBzB,EAAAC,EAAAC,cAAA,SAAOC,MAAM,SACTH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,MACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,QACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,WACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,YAGJxB,EAAAC,EAAAC,cAAA,wBAnFNU,aCkEfgB,6MA5DXC,wBAA0B,WACtB7C,MAAM,oBACE,CACIC,QAAS,CACLC,OAAU,mBACVC,eAAgB,sBAGvBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFC,EAAKC,SAAS,CACVqC,UAAYvC,0FAd5BG,YAAYC,KAAKkC,wBAAyB,sCAoB1C,IAAMjC,EAAWD,KAAKE,OAASF,KAAKE,MAAMiC,UAC1C,OACQ9B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAeC,UAAU,oBAChCJ,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,qCAEZF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,4BACNP,EACOI,EAAAC,EAAAC,cAAA,SAAOC,MAAM,cACTH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,MACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,UAGJxB,EAAAC,EAAAC,cAAA,aACCP,KAAKE,MAAMiC,UAAUpB,IAAI,SAAAqB,GAAW,OAC7B/B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAQ6B,EAAYzB,KACxBN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAQ6B,EAAYC,mBAOxChC,EAAAC,EAAAC,cAAA,SAAOC,MAAM,SACTH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,MACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,UAGJxB,EAAAC,EAAAC,cAAA,wBAxDDU,aCkEpBqB,6MA5DXC,aAAe,WACXlD,MAAM,QACN,CACIC,QAAS,CACLC,OAAU,mBACVC,eAAgB,sBAGvBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFC,EAAKC,SAAS,CACVqC,UAAYvC,0FAdpBG,YAAYC,KAAKuC,aAAc,sCAoB/B,IAAMtC,EAAWD,KAAKE,OAASF,KAAKE,MAAMsC,MAC1C,OACQnC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAeC,UAAU,oBAChCJ,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,yBAEZF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,4BACNP,EACOI,EAAAC,EAAAC,cAAA,SAAOC,MAAM,cACTH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,MACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,UAGJxB,EAAAC,EAAAC,cAAA,aACCP,KAAKE,MAAMsC,MAAMzB,IAAI,SAAA0B,GAAI,OAClBpC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAQkC,EAAK9B,KACjBN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,aAAQkC,EAAKC,gBAOjCrC,EAAAC,EAAAC,cAAA,SAAOC,MAAM,SACTH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,MACAxB,EAAAC,EAAAC,cAAA,MAAIsB,MAAM,OAAV,UAGJxB,EAAAC,EAAAC,cAAA,wBAxDZU,+CCGxB0B,EAAA,WAAe,OASXtC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACfJ,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAQuC,GAAG,WACPxC,EAAAC,EAAAC,cAACqC,EAAAtC,EAAOwC,MAAR,CAAcD,GAAG,UAAUE,KAAK,SAChC1C,EAAAC,EAAAC,cAAA,OACIyC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACP1C,UAAU,2BACV2C,IAAI,iBAER/C,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,qFCNO,qCCwFA4C,GCvGoBC,IAAMrC,2LDmCjC,OACEZ,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAD,eAVE1C,cExBE2C,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCXNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,KAAK,SAAA+E,GACjCA,EAAaC","file":"static/js/main.72b7e428.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Archemy_TM.fd822dfb.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const home = [\r\n  { File: '' },\r\n  { Edit: '' },\r\n  { View: '' },\r\n  { Catalog: '' },\r\n  {\r\n    Solution: [\r\n      { Build: '/solution/build' },\r\n      { Operate: '/solution/operate' },\r\n      { Visualize: '/solution/visualize' },\r\n    ],\r\n  },\r\n  { Metrics: '' },\r\n  { Tools: '' },\r\n  { Scripts: '' },\r\n  { Help: '' },\r\n];\r\n\r\nconst build = [\r\n  { File: '' },\r\n  { Edit: '' },\r\n  { View: '' },\r\n  {\r\n    Build: [\r\n      { Elicit: '/solution/build/elicit' },\r\n      { Search: '/solution/build/search' },\r\n      { Discover: '/solution/build/discover' },\r\n      { Reuse: '/solution/build/reuse' },\r\n      { Adapt: '/solution/build/adapt' },\r\n      { Deploy: '/solution/build/deploy' },\r\n    ],\r\n  },\r\n  { Operate: '/solution/operate' },\r\n  { Visualize: '/solution/visualize' },\r\n  { Help: '' },\r\n];\r\n\r\nconst operate = [\r\n  { File: '' },\r\n  { Edit: '' },\r\n  { View: '' },\r\n  { Build: '/solution/build' },\r\n  { Operate: '/solution/operate' },\r\n  { Visualize: '/solution/visualize' },\r\n  { Help: '' },\r\n];\r\n\r\nconst visualize = [\r\n  { File: '' },\r\n  { Edit: '' },\r\n  { View: '' },\r\n  { Build: '/solution/build' },\r\n  { Operate: '/solution/operate' },\r\n  { Visualize: '/solution/visualize' },\r\n  { Help: '' },\r\n];\r\n\r\nmodule.exports = (key) => {\r\n  switch (key) {\r\n    case 'solution':\r\n    case 'solution/workspace':\r\n    case '/solution/build':\r\n      return build;\r\n    case '/solution/build/search':\r\n      return build;\r\n    case '/solution/build/elicit':\r\n      return build;\r\n    case '/solution/build/discover':\r\n      return build;\r\n    case '/solution/build/discoverreview':\r\n      return build;\r\n    case '/solution/build/reuse':\r\n      return build;\r\n    case '/solution/build/adapt':\r\n      return build;\r\n    case '/solution/build/deploy':\r\n      return build;\r\n    case '/solution/operate':\r\n      return operate;\r\n    case '/solution/operaterun':\r\n      return operate;\r\n    case '/solution/visualize':\r\n      return visualize;\r\n    case '/solution/visreview':\r\n      return visualize;\r\n    default:\r\n      return home;\r\n  }\r\n};\r\n","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass ServerInfo extends Component {\r\n\r\n    componentDidMount() {\r\n        setInterval(this.getServerData, 2000);\r\n    }\r\n\r\n    getServerData = () => {\r\n        fetch('/rest/server',\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState(data);\r\n                });\r\n    };\r\n\r\n    render() {\r\n        const haveData = this.state && this.state.result && this.state.result !== undefined && this.state.result[\"kie-server-info\"];\r\n        return (\r\n                <div class=\"card mb-4\">\r\n                    <div class=\"view overlay\" className=\"ReactTitleStyle4\">\r\n                        <center><strong>Server Info</strong></center>\r\n                    </div>\r\n                    <div class=\"card-body jbpm-card-body\">\r\n                        <dl class=\"row\">\r\n                            <dt class=\"col-sm-3\">Name</dt>\r\n                            {haveData ? (\r\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].name}</dd>\r\n                            ) : (\r\n                                    <dd class=\"col-sm-9\"></dd>\r\n                            )}\r\n\r\n                            <dt class=\"col-sm-3\">Id</dt>\r\n                            {haveData ? (\r\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].id}</dd>\r\n                            ) : (\r\n                                    <dd class=\"col-sm-9\"></dd>\r\n                            )}\r\n\r\n                            <dt class=\"col-sm-3\">Version</dt>\r\n                            {haveData ? (\r\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].version}</dd>\r\n                            ) : (\r\n                                    <dd class=\"col-sm-9\"></dd>\r\n                            )}\r\n\r\n                            <dt class=\"col-sm-3\">Location</dt>\r\n                            {haveData ? (\r\n                                    <dd class=\"col-sm-9\">{this.state.result[\"kie-server-info\"].location}</dd>\r\n                            ) : (\r\n                                    <dd class=\"col-sm-9\"></dd>\r\n                            )}\r\n\r\n                            <dt class=\"col-sm-3\">Capabilities</dt>\r\n                            {haveData ? (\r\n                                    <dd class=\"col-sm-9\">\r\n                                        <ul>\r\n                                            {this.state.result[\"kie-server-info\"].capabilities.map(capability => (\r\n                                                    <li>{capability}</li>\r\n                                            ))\r\n                                            }\r\n                                        </ul>\r\n                                    </dd>\r\n                            ) : (\r\n                                    <dd class=\"col-sm-9\"></dd>\r\n                            )}\r\n                        </dl>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ServerInfo;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass ProcessDefsInfo extends Component {\r\n\r\n    componentDidMount() {\r\n        setInterval(this.getProcessDefsData, 2000);\r\n    }\r\n\r\n    getProcessDefsData = () => {\r\n        fetch('/rest/server/containers/kaeam-react-spring-kjar/processes',\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState(data);\r\n                });\r\n    };\r\n\r\n    handleStartProcess = (cid, pid) => {\r\n        fetch('/rest/server/containers/' + cid + '/processes/' + pid + '/instances', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n    };\r\n\r\n    handleTaskList = (cid, pid) => {\r\n        console.log(`COMPILE NUMBER: 1`);\r\n        fetch('/rest/server/containers/' + cid + '/processes/' + pid + '/tasks',\r\n        {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        // .then(response => response.json())\r\n        // .then(data => {\r\n        //     this.setState(data);\r\n        // });\r\n    };\r\n\r\n    render() {\r\n        const haveData = this.state && this.state.processes;\r\n        return (\r\n                <div class=\"card mb-4\">\r\n                    <div class=\"view overlay\" className=\"ReactTitleStyle2\">\r\n                        <center><strong>Process Definitions</strong></center>\r\n                    </div>\r\n                    <div class=\"card-body jbpm-card-body\">\r\n                        {haveData ? (\r\n                                <table class=\"table mb-0\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Name</th>\r\n                                        <th scope=\"col\">Action</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.state.processes.map(processdef => (\r\n                                            <tr>\r\n                                                <td><small>{processdef[\"process-name\"]}</small></td>\r\n                                                <td><button type=\"button\" class=\"btn btn-primary\" onClick={() => this.handleStartProcess(processdef[\"container-id\"],processdef[\"process-id\"])}>Start</button></td>\r\n                                                <td><button type=\"button\" class=\"btn btn-primary\" onClick={() => this.handleTaskList(processdef[\"container-id\"],processdef[\"process-id\"])}>Get Tasks</button></td>\r\n                                            </tr>\r\n                                    ))\r\n                                    }\r\n                                    </tbody>\r\n                                </table>\r\n                        ) : (\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Id</th>\r\n                                        <th scope=\"col\">Name</th>\r\n                                        <th scope=\"col\">Version</th>\r\n                                        <th scope=\"col\">Action</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    </tbody>\r\n                                </table>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProcessDefsInfo;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass ProcessInstancesInfo extends Component {\r\n\r\n    componentDidMount() {\r\n        setInterval(this.getProcessInstancesData, 2000);\r\n    }\r\n\r\n    getProcessInstancesData = () => {\r\n        fetch('/processinstances',\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.setState({\r\n                        instances : data\r\n                    });\r\n                });\r\n    };\r\n\r\n    render() {\r\n        const haveData = this.state && this.state.instances;\r\n        return (\r\n                <div class=\"card mb-4\">\r\n                    <div class=\"view overlay\" className=\"ReactTitleStyle3\">\r\n                        <center><strong>Process Instances</strong></center>\r\n                    </div>\r\n                    <div class=\"card-body jbpm-card-body\">\r\n                        {haveData ? (\r\n                                <table class=\"table mb-0\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Id</th>\r\n                                        <th scope=\"col\">Name</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.state.instances.map(processinst => (\r\n                                            <tr>\r\n                                                <td><small>{processinst.id}</small></td>\r\n                                                <td><small>{processinst.processName}</small></td>\r\n                                            </tr>\r\n                                    ))\r\n                                    }\r\n                                    </tbody>\r\n                                </table>\r\n                        ) : (\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Id</th>\r\n                                        <th scope=\"col\">Name</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    </tbody>\r\n                                </table>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProcessInstancesInfo;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass TasksInfo extends Component {\r\n\r\n    componentDidMount() {\r\n        setInterval(this.getTasksData, 2000);\r\n    }\r\n\r\n    getTasksData = () => {\r\n        fetch('/task',\r\n        {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState({\r\n                instances : data\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const haveData = this.state && this.state.tasks;\r\n        return (\r\n                <div class=\"card mb-4\">\r\n                    <div class=\"view overlay\" className=\"ReactTitleStyle3\">\r\n                        <center><strong>Tasks</strong></center>\r\n                    </div>\r\n                    <div class=\"card-body jbpm-card-body\">\r\n                        {haveData ? (\r\n                                <table class=\"table mb-0\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Id</th>\r\n                                        <th scope=\"col\">Name</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.state.tasks.map(task => (\r\n                                            <tr>\r\n                                                <td><small>{task.id}</small></td>\r\n                                                <td><small>{task.taskName}</small></td>\r\n                                            </tr>\r\n                                    ))\r\n                                    }\r\n                                    </tbody>\r\n                                </table>\r\n                        ) : (\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Id</th>\r\n                                        <th scope=\"col\">Name</th>\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    </tbody>\r\n                                </table>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TasksInfo;","import React from 'react';\r\n/** import { Link } from 'react-router-dom'; */\r\nimport \"../../App.css\";\r\nimport logo from '../img/Archemy_TM.png';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nexport default () => (\r\n//   <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n//     <div className=\"navbar-brand\">\r\n//       <div className=\"navbar-item\">\r\n//         <img src={logo} alt=\"Archemy Logo\" />\r\n//         <h3 className=\"nav-title\">Active Business Solutions Network Workbench</h3>\r\n//       </div>\r\n//     </div>\r\n//   </nav>\r\n    <div className=\"LogoTitleStyle\">\r\n    <Navbar bg=\"#1f5f71\">\r\n        <Navbar.Brand bg=\"#1f5f71\" href=\"#home\">\r\n        <img\r\n            src={logo}\r\n            width=\"70\"\r\n            height=\"50\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"Archemy Logo\"\r\n        />\r\n        <h3 className=\"nav-title\">Active Business Solutions Network Workbench</h3>\r\n        </Navbar.Brand>\r\n    </Navbar>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction buildNav(nav, path) {\r\n  return nav.map((link) => {\r\n    // the nav links are objs (key/val)\r\n    const [linkTitle, linkDest] = Object.entries(link)[0];\r\n\r\n    const active = (path === linkDest) ? 'is-active' : '';\r\n    return (\r\n      <li className={active}>\r\n        <Link to={linkDest} className=\"navbar-item\" key={`div__subnav__${linkTitle.toString()}`}>\r\n          {linkTitle}\r\n        </Link>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\nexport default ({ nav, path }) => {\r\n  const { Build } = nav.find(obj => ('Build' in obj));\r\n\r\n  return (\r\n    <div className=\"tabs\">\r\n      <ul>\r\n        {buildNav(Build, path)}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport {\r\n  BrowserRouter as Router, Route, Switch, Redirect\r\n} from 'react-router-dom';\r\nimport React, {Component} from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport './index.css';\r\n\r\nimport ServerInfo from \"./ServerInfo\";\r\nimport ProcessDefsInfo from \"./ProcessDefsInfo\";\r\nimport ProcessInstancesInfo from \"./ProcessInstancesInfo\";\r\nimport TasksInfo from \"./TasksInfo\";\r\n\r\nimport GlobalNav from \"./client/components/GlobalNav\";\r\nimport Nav       from './client/components/Nav';\r\nimport navSwitch from './client/components/homeNav';\r\nimport TabsBuild from './client/components/TabsBuild';\r\nimport Footer    from './client/components/Footer';\r\nimport Shortcuts from './client/components/Shortcuts';\r\nimport Login     from './client/components/Login';\r\nimport Solution  from './client/components/Solution';\r\nimport Search    from './client/components/Search';\r\nimport Elicit    from './client/components/Elicit';\r\nimport Discover  from './client/components/Discover';\r\nimport Reuse     from './client/components/Reuse';\r\nimport Adapt     from './client/components/Adapt';\r\nimport Deploy    from './client/components/Deploy';\r\nimport WorkSpace from './client/components/WorkSpace';\r\nimport DiscoverReview from './client/components/DiscoverReview';\r\nimport Operate   from './client/components/Operate';\r\nimport OperateRun from './client/components/OperateRun';\r\nimport Visualize from './client/components/Visualize';\r\nimport VisReview from './client/components/VisReview';\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n          <Router>\r\n            <div className=\"App\">\r\n                <GlobalNav />\r\n                <ServerInfo />\r\n                <ProcessDefsInfo/>\r\n                <ProcessInstancesInfo/>\r\n                <TasksInfo/>\r\n                {/* <div class=\"jumbotron jumbotron-fluid\" className=\"ReactTitleStyle\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <p>\r\n                        <strong><h3>Welcome to your jBPM React Business Application!</h3></strong>\r\n                    </p>\r\n                    <br/>\r\n                </div> */}\r\n                {/* <div class=\"container\">\r\n                    <Route\r\n                    path=\"*\"\r\n                    render={props => (\r\n                        <Nav nav={navSwitch(props.location.pathname)} />\r\n                    )}\r\n                    />\r\n                    <section className=\"container\">\r\n                        <article className=\"columns\">\r\n                            <div className=\"container\">\r\n                                <main className=\"column\">\r\n                                    <Switch>\r\n                                        <Route exact path=\"/\" component={Login} />\r\n                                        <Route exact path=\"/solution\" component={Solution} />\r\n                                        <Route exact path=\"/solution/workspace\" component={WorkSpace} />\r\n                                        <Route\r\n                                        path=\"/solution/build\"\r\n                                        render={props => (\r\n                                            <span>\r\n                                            <TabsBuild\r\n                                                nav={navSwitch(props.location.pathname)}\r\n                                                path={props.location.pathname}\r\n                                            />\r\n                                            <Route exact path=\"/solution/build/elicit\" component={Elicit} />\r\n                                            <Route exact path=\"/solution/build/search\" component={Search} />\r\n                                            <Route exact path=\"/solution/build/discover\" component={Discover} />\r\n                                            <Route exact path=\"/solution/build/discoverreview\" component={DiscoverReview} />\r\n                                            <Route exact path=\"/solution/build/reuse\" component={Reuse} />\r\n                                            <Route exact path=\"/solution/build/adapt\" component={Adapt} />\r\n                                            <Route exact path=\"/solution/build/deploy\" component={Deploy} />\r\n                                            </span>\r\n                                        )}\r\n                                        />\r\n                                        <Route exact path=\"/solution/operate\" component={Operate} />\t\t\t\t\r\n                                        <Route exact path=\"/solution/operaterun\" component={OperateRun} />\r\n                                        <Route exact path=\"/solution/visualize\" component={Visualize} />\r\n                                        <Route exact path=\"/solution/visreview\" component={VisReview} />\r\n                                    </Switch>\r\n                                </main>\r\n                            </div>\r\n                            <aside className=\"column is-one-quarter\">\r\n                                <Shortcuts />\r\n                            </aside>\r\n                        </article>\r\n                        <Footer />\r\n                    </section>\r\n                </div> */}\r\n            </div>\r\n        </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n/** import PropTypes from 'prop-types'; */\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /**\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      error: null,\r\n    };\r\n    */\r\n\r\n    this.update = {\r\n      username: this.updateState.bind(this, 'username'),\r\n      password: this.updateState.bind(this, 'password'),\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  updateState(field, event) {\r\n    this.setState({ [field]: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const { history } = this.props;\r\n    history.push('/solution/workspace');\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <section className=\"hero\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container has-text-centered max-d\">\r\n            <div className=\"column\">\r\n              <h3 className=\"title\">Login</h3>\r\n              <p className=\"subtitle\">Please log in to proceed.</p>\r\n              <div className=\"box\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                  {/* USERNAME */}\r\n                  <div className=\"field is-horizontal\">\r\n                    <div className=\"field-label is-normal\">\r\n                      <label htmlFor=\"Username\" className=\"label\">Username</label>\r\n                    </div>\r\n                    <div className=\"field-body\">\r\n                      <div className=\"field\">\r\n                        <p className=\"control\">\r\n                          <input id=\"Username\" className=\"input is-medium\" type=\"text\" placeholder=\"Username\" onChange={this.update.username} />\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"field is-horizontal\">\r\n                    <div className=\"field-label is-normal\">\r\n                      <label htmlFor=\"Password\" className=\"label\">Password</label>\r\n                    </div>\r\n                    <div className=\"field-body\">\r\n                      <div className=\"field\">\r\n                        <p className=\"control\">\r\n                          <input id=\"Password\" className=\"input is-medium\" type=\"password\" placeholder=\"Company\" onChange={this.update.password} />\r\n\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"field is-horizontal\">\r\n                    <div className=\"field-label is-normal\">\r\n                      <label htmlFor=\"Company\" className=\"label\">Company</label>\r\n                    </div>\r\n                    <div className=\"field-body\">\r\n                      <div className=\"field\">\r\n                        <p className=\"control\">\r\n                          <input id=\"Company\" className=\"input is-medium\" type=\"text\" placeholder=\"Company\" onChange={this.update.password} />\r\n\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"field\">\r\n                    <p className=\"control has-text-right\">\r\n                      <Button variant=\"secondary\" type=\"submit\" value=\"Login\"></Button>\r\n                    </p>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import './custom.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}